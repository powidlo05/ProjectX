import telebot
from telebot import types
import requests
import json
import datetime


bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
favorite_cities = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ txt
def write_req(city):
    try:
        with open("requests.txt", "a") as file:
            now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            file.write(f"{now}: Requested city - {city}\n")  # –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≥–æ—Ä–æ–¥–∞
    except Exception as e:
        print(f"Error writing to file: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
def get_weather(city, day="today"):
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    api_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_TOKEN}&units=metric&lang=ru"
    if day == "tomorrow":
        api_url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OPENWEATHER_TOKEN}&units=metric&" \
                  f"lang=ru&cnt=2"
    write_req(city)  # –ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–∞–π–ª
    response = requests.get(api_url)   # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    if response.status_code == 200:  # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        data = json.loads(response.content)  # –ü–∞—Ä—Å–∏–Ω–≥ json –æ—Ç–≤–µ—Ç–∞
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
        if day == "today":
            # –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
            temp = data['main']['temp']
            feels_like = data['main']['feels_like']
            temp_min = data['main']['temp_min']
            temp_max = data['main']['temp_max']
            humidity = data['main']['humidity']
            description = data['weather'][0]['description']
            wind_speed = data['wind']['speed']
            icon = data['weather'][0]['icon']
            return temp, feels_like, temp_min, temp_max, humidity, description, wind_speed, icon
        else:
            # –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            temp = data['list'][1]['main']['temp']
            feels_like = data['list'][1]['main']['feels_like']
            temp_min = data['list'][1]['main']['temp_min']
            temp_max = data['list'][1]['main']['temp_max']
            humidity = data['list'][1]['main']['humidity']
            description = data['list'][1]['weather'][0]['description']
            wind_speed = data['list'][1]['wind']['speed']
            icon = data['list'][1]['weather'][0]['icon']
            return temp, feels_like, temp_min, temp_max, humidity, description, wind_speed, icon
    else:
        return None, None, None, None, None, None, None, None  # –í–æ–∑–≤—Ä–∞—Ç None –ø—Ä–∏ –æ—à–∏–±–∫–µ


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
def get_city_by_location(latitude, longitude):
    # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ø–Ω–¥–µ–∫—Å –ì–µ–æ–∫–æ–¥–µ—Ä—É
    api_url = f"https://geocode-maps.yandex.ru/1.x/?apikey={YANDEX_GEOCODER_TOKEN}&geocode={longitude},{latitude}&" \
              f"format=json"
    try:
        response = requests.get(api_url)
        if response.status_code == 200:
            data = json.loads(response.content)
            # –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏–∑ JSON –æ—Ç–≤–µ—Ç–∞
            city = data['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['metaDataProperty'][
                'GeocoderMetaData']['Address']['Components'][4]['name']
            return city
        else:
            return None
    except ConnectionError as err:
        print(f"ConnectionError: {err}")
        return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
@bot.message_handler(commands=['start'])
def start(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥")
    button2 = types.KeyboardButton("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    button3 = types.KeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞")  # –î–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    keyboard.add(button1, button2, button3)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@bot.message_handler(content_types=['location'])
def location(message):
    if message.location is not None:
        latitude = message.location.latitude
        longitude = message.location.longitude
        city = get_city_by_location(latitude, longitude)
        if city:
            show_weather(message, city)
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.text == "–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥":
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        bot.register_next_step_handler(msg, show_weather)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ show_weather
    elif message.text == "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞":
        show_favorite_cities(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã
def show_weather(message, city=None):
    if city is None:
        city = message.text
    temp, feels_like, temp_min, temp_max, humidity, description, wind_speed, icon = get_weather(city)
    if temp:
        weather_message = f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n" \
                          f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like:.1f}¬∞C)\n" \
                          f"‚¨áÔ∏è –ú–∏–Ω–∏–º—É–º: {temp_min:.1f}¬∞C, ‚¨ÜÔ∏è –ú–∞–∫—Å–∏–º—É–º: {temp_max:.1f}¬∞C\n" \
                          f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n" \
                          f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n" \
                          f"‚òÅÔ∏è–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {description}"
        keyboard = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="tomorrow")
        add_button = types.InlineKeyboardButton("–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_{city}")
        remove_button = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö", callback_data=f"remove_{city}")
        keyboard.add(button1, add_button, remove_button)
        bot.send_message(message.chat.id, weather_message, reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É.")


@bot.callback_query_handler(func=lambda query: query.data == "tomorrow")
def show_tomorrow_weather(query):
    city = query.message.text.split("\n")[0].split(":")[0].split()[-1]
    temp, feels_like, temp_min, temp_max, humidity, description, wind_speed, icon = get_weather(city, "tomorrow")
    if temp:
        bot.send_message(chat_id=query.message.chat.id,
                         text=f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city} –∑–∞–≤—Ç—Ä–∞:\n"
                              f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like:.1f}¬∞C)\n"
                              f"‚¨áÔ∏è –ú–∏–Ω–∏–º—É–º: {temp_min:.1f}¬∞C, ‚¨ÜÔ∏è –ú–∞–∫—Å–∏–º—É–º: {temp_max:.1f}¬∞C\n"
                              f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                              f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
                              f"‚òÅÔ∏è–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {description}")
        bot.send_photo(query.message.chat.id, f"http://openweathermap.org/img/wn/{icon}@2x.png")
    else:
        bot.answer_callback_query(query.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
def show_favorite_cities(message):
    if favorite_cities:
        keyboard = types.InlineKeyboardMarkup()
        for city in favorite_cities:
            button = types.InlineKeyboardButton(city, callback_data=f"city_{city}")
            keyboard.add(button)
        bot.send_message(message.chat.id, "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    data = call.data.split("_")
    action = data[0]

    if len(data) > 1:
        city = data[1]
    else:
        city = None  # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None

    if action == "city":
        show_weather(call.message, city)
    elif action == "add":
        if city not in favorite_cities:
            favorite_cities[city] = True  # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å
            bot.answer_callback_query(call.id, "–ì–æ—Ä–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ")
        else:
            bot.answer_callback_query(call.id, "–ì–æ—Ä–æ–¥ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç")
    elif action == "remove":
        if city in favorite_cities:
            del favorite_cities[city]
            bot.answer_callback_query(call.id, "–ì–æ—Ä–æ–¥ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö")
        else:
            bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")


bot.polling()
